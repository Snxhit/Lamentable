{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Lamentable documentations! \u2b50 Please consider starring the Lamentable repository on GitHub! Why Lamentable? Blazing fast! Written in Rust, Lamentable runs like hell \u2014 fast startup, fast execution, zero bloat. Beginner friendly No weird syntax, no hidden traps \u2014 just clean, readable code. If you've touched Python, you\u2019re already halfway there. Made to get shit done. Lamentable is for builders, not theorists. Prototype fast, iterate faster, and ship without friction. Minimalistic Simple semantics, sane defaults, and tools that stay out of your way. Setup Download release packages from the GitHub repository, Create a file with any name, with the extension .lm , Run the .lm file with the downloaded executable! Enjoy Lamenting!","title":"Home"},{"location":"#welcome-to-the-lamentable-documentations","text":"\u2b50 Please consider starring the Lamentable repository on GitHub!","title":"Welcome to the Lamentable documentations!"},{"location":"#why-lamentable","text":"Blazing fast! Written in Rust, Lamentable runs like hell \u2014 fast startup, fast execution, zero bloat. Beginner friendly No weird syntax, no hidden traps \u2014 just clean, readable code. If you've touched Python, you\u2019re already halfway there. Made to get shit done. Lamentable is for builders, not theorists. Prototype fast, iterate faster, and ship without friction. Minimalistic Simple semantics, sane defaults, and tools that stay out of your way.","title":"Why Lamentable?"},{"location":"#setup","text":"Download release packages from the GitHub repository, Create a file with any name, with the extension .lm , Run the .lm file with the downloaded executable! Enjoy Lamenting!","title":"Setup"},{"location":"about/","text":"About me! This is Lamentable. A programming language created in the Rust language, made for simplicity, when you just want to get stuff up and running. About Snxhit Hello! I am Snxhit, a developer from far beyond! I take an interest in learning a wide variety of things. My interests include: programming, music production, game development, et cetera, list goes on!","title":"About"},{"location":"about/#about-me","text":"","title":"About me!"},{"location":"about/#this-is-lamentable","text":"A programming language created in the Rust language, made for simplicity, when you just want to get stuff up and running.","title":"This is Lamentable."},{"location":"about/#about-snxhit","text":"Hello! I am Snxhit, a developer from far beyond! I take an interest in learning a wide variety of things.","title":"About Snxhit"},{"location":"about/#my-interests-include","text":"programming, music production, game development, et cetera, list goes on!","title":"My interests include:"},{"location":"keywords/const/","text":"const \ud83d\udd39 Summary The const keyword allows the creation of a non-reassignable variable with the datatype string or integer . The value stored in the variable can be retrieved at any time using the name of the variable. TLDR: Creates a non-reassignable variable. \ud83d\udd0d Syntax const datatype name = value, Where datatype is either string or integer . Where name is a combination of characters that contains letters and/or numbers. Name must unique, must have never been used as a variable name before. Where value can be a string literal, variable name (identifier), a number or a mathematical expression. (Expression can also utilize multiple variables.) Examples: const integer a = 42, const string b = \"Hello world!\", const integer c = 2 * 8, shout a, shout b, shout a + c, Output : 42 Hello world! 58","title":"const"},{"location":"keywords/const/#const","text":"","title":"const"},{"location":"keywords/const/#summary","text":"The const keyword allows the creation of a non-reassignable variable with the datatype string or integer . The value stored in the variable can be retrieved at any time using the name of the variable. TLDR: Creates a non-reassignable variable.","title":"\ud83d\udd39 Summary"},{"location":"keywords/const/#syntax","text":"const datatype name = value, Where datatype is either string or integer . Where name is a combination of characters that contains letters and/or numbers. Name must unique, must have never been used as a variable name before. Where value can be a string literal, variable name (identifier), a number or a mathematical expression. (Expression can also utilize multiple variables.) Examples: const integer a = 42, const string b = \"Hello world!\", const integer c = 2 * 8, shout a, shout b, shout a + c, Output : 42 Hello world! 58","title":"\ud83d\udd0d Syntax"},{"location":"keywords/let/","text":"let \ud83d\udd39 Summary The let keyword allows the creation of a reassignable variable with the datatype string or integer . The value stored in the variable can be retrieved at any time using the name of the variable. TLDR: Creates a reassignable variable. \ud83d\udd0d Syntax let datatype name = value, Where datatype is either string or integer . Where name is a combination of characters that contains letters and/or numbers. Where value can be a string literal, variable name (identifier), a number or a mathematical expression. (Expression can also utilize multiple variables.) Examples: let integer a = 1, let integer b = 3 * 5, let string c = \"Hello world!\", shout a, shout b, shout a + b, shout c, Output : 1 15 16 Hello world!","title":"let"},{"location":"keywords/let/#let","text":"","title":"let"},{"location":"keywords/let/#summary","text":"The let keyword allows the creation of a reassignable variable with the datatype string or integer . The value stored in the variable can be retrieved at any time using the name of the variable. TLDR: Creates a reassignable variable.","title":"\ud83d\udd39 Summary"},{"location":"keywords/let/#syntax","text":"let datatype name = value, Where datatype is either string or integer . Where name is a combination of characters that contains letters and/or numbers. Where value can be a string literal, variable name (identifier), a number or a mathematical expression. (Expression can also utilize multiple variables.) Examples: let integer a = 1, let integer b = 3 * 5, let string c = \"Hello world!\", shout a, shout b, shout a + b, shout c, Output : 1 15 16 Hello world!","title":"\ud83d\udd0d Syntax"},{"location":"keywords/shout/","text":"shout \ud83d\udd39 Summary The shout keyword is the Python equivalent of the print() function. It puts anything that comes right after it into the console. TLDR: Puts a value on the console. \ud83d\udd0d Syntax shout value, Where value can be a string literal, variable name (identifier), a number or a mathematical expression. Examples: shout \"Hello world!\", shout a, shout 1 + 3 / 3, Output : Hello world! Value of a 2","title":"shout"},{"location":"keywords/shout/#shout","text":"","title":"shout"},{"location":"keywords/shout/#summary","text":"The shout keyword is the Python equivalent of the print() function. It puts anything that comes right after it into the console. TLDR: Puts a value on the console.","title":"\ud83d\udd39 Summary"},{"location":"keywords/shout/#syntax","text":"shout value, Where value can be a string literal, variable name (identifier), a number or a mathematical expression. Examples: shout \"Hello world!\", shout a, shout 1 + 3 / 3, Output : Hello world! Value of a 2","title":"\ud83d\udd0d Syntax"},{"location":"operators/arithmetic/","text":"arithmetic \ud83d\udd39 Summary Currently, there are four different arithmetic operators implemented. Then, there is also a special operator used to determine order. Follows the rules of BODMAS/PEMDAS + (Add) - (Substract) * (Multiply) / (Divide) ( ) (Round brackets are used to determine order of evaluation of the expression.) TLDR: Arithmetic is the art of messing around with numbers. \ud83d\udd0d Syntax value1 operator1 value2, Where all values are integer . Where operator1 is + , - , * , or / . Examples: 1 + 2 3 * 384 / 192 (29 + 6) / 5 (2 * 2 * 2) + 2 Output : 3 6 7 10","title":"arithmetic"},{"location":"operators/arithmetic/#arithmetic","text":"","title":"arithmetic"},{"location":"operators/arithmetic/#summary","text":"Currently, there are four different arithmetic operators implemented. Then, there is also a special operator used to determine order. Follows the rules of BODMAS/PEMDAS + (Add) - (Substract) * (Multiply) / (Divide) ( ) (Round brackets are used to determine order of evaluation of the expression.) TLDR: Arithmetic is the art of messing around with numbers.","title":"\ud83d\udd39 Summary"},{"location":"operators/arithmetic/#syntax","text":"value1 operator1 value2, Where all values are integer . Where operator1 is + , - , * , or / . Examples: 1 + 2 3 * 384 / 192 (29 + 6) / 5 (2 * 2 * 2) + 2 Output : 3 6 7 10","title":"\ud83d\udd0d Syntax"}]}